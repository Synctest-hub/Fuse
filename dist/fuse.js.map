{"version":3,"file":"fuse.es6.min.js","sources":["../src/search/bitap-search/bitap-score.js","../src/search/bitap-search/bitap-matched-indices.js","../src/search/bitap-search/bitap-search.js","../src/search/bitap-search/bitap-pattern-alphabet.js","../src/search/bitap-search/constants.js","../src/search/bitap-search/index.js","../src/search/extended-search/exact-match.js","../src/search/extended-search/inverse-exact-match.js","../src/search/extended-search/prefix-exact-match.js","../src/search/extended-search/inverse-prefix-exact-match.js","../src/search/extended-search/suffix-exact-match.js","../src/search/extended-search/inverse-suffix-exact-match.js","../src/helpers/type-checkers.js","../src/search/extended-search/index.js","../src/search/ngram-search/ngram.js","../src/search/ngram-search/array-utils/union.js","../src/search/ngram-search/array-utils/intersection.js","../src/search/ngram-search/array-utils/index.js","../src/search/ngram-search/distance/jaccard-distance.js","../src/search/ngram-search/distance/index.js","../src/search/ngram-search/index.js","../src/search/index.js","../src/helpers/get.js","../src/tools/create-index.js","../src/tools/key-store.js","../src/tools/index.js","../src/transform/transform-matches.js","../src/transform/transform-score.js","../src/transform/index.js","../src/index.js"],"sourcesContent":["module.exports = (pattern, { errors = 0, currentLocation = 0, expectedLocation = 0, distance = 100 }) => {\n  const accuracy = errors / pattern.length\n  const proximity = Math.abs(expectedLocation - currentLocation)\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + (proximity / distance)\n}\n","module.exports = (matchmask = [], minMatchCharLength = 1) => {\n  let matchedIndices = []\n  let start = -1\n  let end = -1\n  let i = 0\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i]\n    if (match && start === -1) {\n      start = i\n    } else if (!match && start !== -1) {\n      end = i - 1\n      if ((end - start) + 1 >= minMatchCharLength) {\n        matchedIndices.push([start, end])\n      }\n      start = -1\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && (i - start) >= minMatchCharLength) {\n    matchedIndices.push([start, i - 1]);\n  }\n\n  return matchedIndices\n}\n","const bitapScore = require('./bitap-score')\nconst matchedIndices = require('./bitap-matched-indices')\n\nmodule.exports = (text, pattern, patternAlphabet, { location = 0, distance = 100, threshold = 0.6, findAllMatches = false, minMatchCharLength = 1, includeMatches = false }) => {\n  const patternLen = pattern.length\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen))\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = text.indexOf(pattern, expectedLocation)\n\n  // a mask of the matches\n  const matchMask = []\n  for (let i = 0; i < textLen; i += 1) {\n    matchMask[i] = 0\n  }\n\n  if (bestLocation !== -1) {\n    let score = bitapScore(pattern, {\n      errors: 0,\n      currentLocation: bestLocation,\n      expectedLocation,\n      distance\n    })\n    currentThreshold = Math.min(score, currentThreshold)\n\n    // What about in the other direction? (speed up)\n    bestLocation = text.lastIndexOf(pattern, expectedLocation + patternLen)\n\n    if (bestLocation !== -1) {\n      let score = bitapScore(pattern, {\n        errors: 0,\n        currentLocation: bestLocation,\n        expectedLocation,\n        distance\n      })\n      currentThreshold = Math.min(score, currentThreshold)\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1\n\n  let lastBitArr = []\n  let finalScore = 1\n  let binMax = patternLen + textLen\n\n  const mask = 1 << (patternLen <= 31 ? patternLen - 1 : 30)\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0\n    let binMid = binMax\n\n    while (binMin < binMid) {\n      const score = bitapScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance\n      })\n\n      if (score <= currentThreshold) {\n        binMin = binMid\n      } else {\n        binMax = binMid\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin)\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid\n\n    let start = Math.max(1, expectedLocation - binMid + 1)\n    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2)\n\n    bitArr[finish + 1] = (1 << i) - 1\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1\n      let charMatch = patternAlphabet[text.charAt(currentLocation)]\n\n      if (charMatch) {\n        matchMask[currentLocation] = 1\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch\n\n      // Subsequent passes: fuzzy match\n      if (i !== 0) {\n        bitArr[j] |= (((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1) | lastBitArr[j + 1]\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = bitapScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance\n        })\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore\n          bestLocation = currentLocation\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation)\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = bitapScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance\n    })\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr\n  }\n\n  let result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: !finalScore ? 0.001 : finalScore,\n  }\n\n  if (includeMatches) {\n    result.matchedIndices = matchedIndices(matchMask, minMatchCharLength)\n  }\n\n  return result\n}\n","module.exports = pattern => {\n  let mask = {}\n  let len = pattern.length\n\n  for (let i = 0; i < len; i += 1) {\n    mask[pattern.charAt(i)] = 0\n  }\n\n  for (let i = 0; i < len; i += 1) {\n    mask[pattern.charAt(i)] |= 1 << (len - i - 1)\n  }\n\n  return mask\n}","// Machine word size\nmodule.exports.MAX_BITS = 32","const bitapSearch = require('./bitap-search')\nconst patternAlphabet = require('./bitap-pattern-alphabet')\nconst { MAX_BITS } = require('./constants')\n\nclass BitapSearch {\n  constructor(pattern, {\n    // Approximately where in the text is the pattern expected to be found?\n    location = 0,\n    // Determines how close the match must be to the fuzzy location (specified above).\n    // An exact letter match which is 'distance' characters away from the fuzzy location\n    // would score as a complete mismatch. A distance of '0' requires the match be at\n    // the exact location specified, a threshold of '1000' would require a perfect match\n    // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n    distance = 100,\n    // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n    // (of both letters and location), a threshold of '1.0' would match anything.\n    threshold = 0.6,\n    // Indicates whether comparisons should be case sensitive.\n    isCaseSensitive = false,\n    // When true, the algorithm continues searching to the end of the input even if a perfect\n    // match is found before the end of the same input.\n    findAllMatches = false,\n    // Minimum number of characters that must be matched before a result is considered a match\n    minMatchCharLength = 1,\n\n    includeMatches = false\n  }) {\n    this.options = {\n      location,\n      distance,\n      threshold,\n      isCaseSensitive,\n      findAllMatches,\n      includeMatches,\n      minMatchCharLength\n    }\n\n    if (pattern.length > MAX_BITS) {\n      throw new Error(`Pattern length exceeds max of ${MAX_BITS}.`);\n    }\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase()\n    this.patternAlphabet = patternAlphabet(this.pattern)\n  }\n\n  searchIn(value) {\n    let text = value.$\n    return this.searchInString(text)\n  }\n\n  searchInString(text) {\n    const { isCaseSensitive, includeMatches } = this.options\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase()\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      }\n\n      if (includeMatches) {\n        result.matchedIndices = [[0, text.length - 1]]\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const { location, distance, threshold, findAllMatches, minMatchCharLength } = this.options\n    return bitapSearch(text, this.pattern, this.patternAlphabet, {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      includeMatches\n    })\n  }\n}\n\nmodule.exports = BitapSearch\n","// Token: 'file\n// Match type: exact-match\n// Description: Items that include `file`\n\nconst isForPattern = pattern => pattern.charAt(0) == \"'\"\n\nconst sanitize = pattern => pattern.substr(1)\n\nconst match = (pattern, text) => {\n  const sanitizedPattern = sanitize(pattern)\n  const index = text.indexOf(sanitizedPattern)\n  const isMatch = index > -1\n\n  return {\n    isMatch,\n    score: 0,\n  }\n}\n\nmodule.exports = {\n  isForPattern,\n  sanitize,\n  match\n}","// Token: !fire\n// Match type: inverse-exact-match\n// Description: Items that do not include `fire`\n\nconst isForPattern = pattern => pattern.charAt(0) == '!'\n\nconst sanitize = pattern => pattern.substr(1)\n\nconst match = (pattern, text) => {\n  const sanitizedPattern = sanitize(pattern)\n  const isMatch = text.indexOf(sanitizedPattern) === -1\n\n  return {\n    isMatch,\n    score: 0\n  }\n}\n\nmodule.exports = {\n  isForPattern,\n  sanitize,\n  match\n}","// Token: ^file\n// Match type: prefix-exact-match\n// Description: Items that start with `file`\n\nconst isForPattern = pattern => pattern.charAt(0) == '^'\n\nconst sanitize = pattern => pattern.substr(1)\n\nconst match = (pattern, text) => {\n  const sanitizedPattern = sanitize(pattern)\n  const isMatch = text.startsWith(sanitizedPattern)\n\n  return {\n    isMatch,\n    score: 0\n  }\n}\n\nmodule.exports = {\n  isForPattern,\n  sanitize,\n  match\n}","// Token: !^fire\n// Match type: inverse-prefix-exact-match\n// Description: Items that do not start with `fire`\n\nconst isForPattern = pattern => pattern.charAt(0) == '!' && pattern.charAt(1) == '^'\n\nconst sanitize = pattern => pattern.substr(2)\n\nconst match = (pattern, text) => {\n  const sanitizedPattern = sanitize(pattern)\n  const isMatch = !text.startsWith(sanitizedPattern)\n\n  return {\n    isMatch,\n    score: 0\n  }\n}\n\nmodule.exports = {\n  isForPattern,\n  sanitize,\n  match\n}","// Token: .file$\n// Match type: suffix-exact-match\n// Description: Items that end with `.file`\n\nconst isForPattern = pattern => pattern.charAt(pattern.length - 1) == '$'\n\nconst sanitize = pattern => pattern.substr(0, pattern.length - 1)\n\nconst match = (pattern, text) => {\n  const sanitizedPattern = sanitize(pattern)\n  const isMatch = text.endsWith(sanitizedPattern)\n\n  return {\n    isMatch,\n    score: 0\n  }\n}\n\nmodule.exports = {\n  isForPattern,\n  sanitize,\n  match\n}","// Token: !.file$\n// Match type: inverse-suffix-exact-match\n// Description: Items that do not end with `.file`\n\nconst isForPattern = pattern => pattern.charAt(0) == '!' && pattern.charAt(pattern.length - 1) == '$'\n\nconst sanitize = pattern => pattern.substring(1, pattern.length - 1)\n\nconst match = (pattern, text) => {\n  const sanitizedPattern = sanitize(pattern)\n  const isMatch = !text.endsWith(sanitizedPattern)\n\n  return {\n    isMatch,\n    score: 0\n  }\n}\n\nmodule.exports = {\n  isForPattern,\n  sanitize,\n  match\n}","const INFINITY = 1 / 0\n\nconst isArray = value => !Array.isArray\n  ? Object.prototype.toString.call(value) === '[object Array]'\n  : Array.isArray(value)\n\n// Adapted from:\n// https://github.com/lodash/lodash/blob/f4ca396a796435422bd4fd41fadbd225edddf175/.internal/baseToString.js\nconst baseToString = value => {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  let result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nconst toString = value => value == null ? '' : baseToString(value);\n\nconst isString = value => typeof value === 'string'\n\nconst isNumber = value => typeof value === 'number'\n\nconst isObject = value => typeof value === 'object'\n\nconst isDefined = value => value !== undefined && value !== null\n\nmodule.exports = {\n  isDefined,\n  isArray,\n  isString,\n  isNumber,\n  isObject,\n  toString\n}\n","const exactMatch = require('./exact-match')\nconst inverseExactMatch = require('./inverse-exact-match')\nconst prefixExactMatch = require('./prefix-exact-match')\nconst inversePrefixExactMatch = require('./inverse-prefix-exact-match')\nconst suffixExactMatch = require('./suffix-exact-match')\nconst inverseSuffixExactMatch = require('./inverse-suffix-exact-match')\nconst BitapSearch = require('../bitap-search')\n\nconst { isString } = require('../../helpers/type-checkers')\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nconst queryfy = (pattern) => pattern.split('|').map(item => item.trim().split(/ +/g))\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that match `jscript`             |\n * | `'python`   | exact-match                | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(pattern, options) {\n    const { isCaseSensitive } = options\n    this.query = null\n    this.options = options\n    // A <pattern>:<BitapSearch> key-value pair for optimizing searching\n    this._fuzzyCache = {}\n\n    if (isString(pattern) && pattern.trim().length > 0) {\n      this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase()\n      this.query = queryfy(this.pattern)\n    }\n  }\n\n  searchIn(value) {\n    const query = this.query\n\n    if (!this.query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    let text = value.$\n\n    text = this.options.isCaseSensitive ? text : text.toLowerCase()\n\n    let matchFound = false\n\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n\n      const parts = query[i]\n      let result = null\n      matchFound = true\n\n      for (let j = 0, pLen = parts.length; j < pLen; j += 1) {\n        let token = parts[j]\n        result = this._search(token, text)\n        if (!result.isMatch) {\n          // AND condition, short-circuit and move on to next part\n          matchFound = false\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (matchFound) {\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n\n  _search(pattern, text) {\n    if (exactMatch.isForPattern(pattern)) {\n      return exactMatch.match(pattern, text)\n    } else if (prefixExactMatch.isForPattern(pattern)) {\n      return prefixExactMatch.match(pattern, text)\n    } else if (inversePrefixExactMatch.isForPattern(pattern)) {\n      return inversePrefixExactMatch.match(pattern, text)\n    } else if (inverseSuffixExactMatch.isForPattern(pattern)) {\n      return inverseSuffixExactMatch.match(pattern, text)\n    } else if (suffixExactMatch.isForPattern(pattern)) {\n      return suffixExactMatch.match(pattern, text)\n    } else if (inverseExactMatch.isForPattern(pattern)) {\n      return inverseExactMatch.match(pattern, text)\n    } else {\n      let searcher = this._fuzzyCache[pattern]\n      if (!searcher) {\n        searcher = new BitapSearch(pattern, this.options)\n        this._fuzzyCache[pattern] = searcher\n      }\n      return searcher.searchInString(text)\n    }\n  }\n}\n\nmodule.exports = ExtendedSearch","const NGRAM_LEN = 3\n\nmodule.exports = (text, { n = NGRAM_LEN, pad = true, sort = false }) => {\n  let nGrams = []\n\n  if (text === null || text === undefined) {\n    return nGrams\n  }\n\n  text = text.toLowerCase()\n  if (pad) {\n    text = ` ${text} `\n  }\n\n  let index = text.length - n + 1\n  if (index < 1) {\n    return nGrams\n  }\n\n  while (index--) {\n    nGrams[index] = text.substr(index, n)\n  }\n\n  if (sort) {\n    nGrams.sort((a, b) => a == b ? 0 : a < b ? -1 : 1)\n  }\n\n  return nGrams\n}","// Assumes arrays are sorted\nmodule.exports = (arr1, arr2) => {\n  let result = []\n  let i = 0\n  let j = 0\n\n  while (i < arr1.length && j < arr2.length) {\n    let item1 = arr1[i]\n    let item2 = arr2[j]\n\n    if (item1 < item2) {\n      result.push(item1)\n      i += 1\n    } else if (item2 < item1) {\n      result.push(item2)\n      j += 1\n    } else {\n      result.push(item2)\n      i += 1\n      j += 1\n    }\n  }\n\n  while (i < arr1.length) {\n    result.push(arr1[i])\n    i += 1\n  }\n\n  while (j < arr2.length) {\n    result.push(arr2[j])\n    j += 1\n  }\n\n  return result;\n}\n","// Assumes arrays are sorted\nmodule.exports = (arr1, arr2) => {\n  let result = []\n  let i = 0\n  let j = 0\n\n  while (i < arr1.length && j < arr2.length) {\n    let item1 = arr1[i]\n    let item2 = arr2[j]\n\n    if (item1 == item2) {\n      result.push(item1)\n      i += 1\n      j += 1\n    } else if (item1 < item2) {\n      i += 1\n    } else if (item1 > item2) {\n      j += 1\n    } else {\n      i += 1\n      j += 1\n    }\n  }\n\n  return result;\n}","module.exports = {\n  union: require('./union'),\n  intersection: require('./intersection')\n}","const { union, intersection } = require('../array-utils')\n\nmodule.exports = (nGram1, nGram2) => {\n  let nGramUnion = union(nGram1, nGram2)\n  let nGramIntersection = intersection(nGram1, nGram2)\n\n  return 1 - nGramIntersection.length / nGramUnion.length\n}","module.exports = {\n  jaccardDistance: require('./jaccard-distance')\n}","const ngram = require('./ngram')\nconst { jaccardDistance } = require('./distance')\n\nclass NGramSearch {\n  constructor(pattern, options = { threshold: 0.6 }) {\n    // Create the ngram, and sort it\n    this.options = options\n    this.patternNgram = ngram(pattern, { sort: true })\n  }\n  searchIn(value) {\n    let textNgram = value.ng\n    if (!textNgram) {\n      textNgram = ngram(value.$, { sort: true })\n      value.ng = textNgram\n    }\n\n    let jacardResult = jaccardDistance(this.patternNgram, textNgram)\n\n    const isMatch = jacardResult < this.options.threshold\n\n    return {\n      score: isMatch ? jacardResult : 1,\n      isMatch\n    }\n  }\n}\n\nmodule.exports = NGramSearch","module.exports = {\n  BitapSearch: require('./bitap-search'),\n  ExtendedSearch: require('./extended-search'),\n  NGramSearch: require('./ngram-search')\n}","const {\n  isDefined,\n  isString,\n  isNumber,\n  isArray,\n  toString\n} = require('./type-checkers')\n\nmodule.exports = (obj, path) => {\n  let list = []\n  let arr = false\n\n  const _get = (obj, path) => {\n    if (!path) {\n      // If there's no path left, we've gotten to the object we care about.\n      list.push(obj)\n    } else {\n      const dotIndex = path.indexOf('.')\n\n      let key = path\n      let remaining = null\n\n      if (dotIndex !== -1) {\n        key = path.slice(0, dotIndex)\n        remaining = path.slice(dotIndex + 1)\n      }\n\n      const value = obj[key]\n\n      if (isDefined(value)) {\n        if (!remaining && (isString(value) || isNumber(value))) {\n          list.push(toString(value))\n        } else if (isArray(value)) {\n          arr = true\n          // Search each item in the array.\n          for (let i = 0, len = value.length; i < len; i += 1) {\n            _get(value[i], remaining)\n          }\n        } else if (remaining) {\n          // An object. Recurse further.\n          _get(value, remaining)\n        }\n      }\n    }\n  }\n\n  _get(obj, path)\n\n  if (arr) {\n    return list\n  }\n\n  return list[0]\n}","const { isArray, isDefined, isString } = require('../helpers/type-checkers')\nconst get = require('../helpers/get')\nconst ngram = require('../search/ngram-search/ngram')\n\nmodule.exports = (keys, list, { getFn = get, ngrams = false } = {}) => {\n  let indexedList = []\n\n  // List is Array<String>\n  if (isString(list[0])) {\n    // Iterate over every string in the list\n    for (let i = 0, len = list.length; i < len; i += 1) {\n      const value = list[i]\n\n      if (isDefined(value)) {\n        // if (!isCaseSensitive) {\n        //   value = value.toLowerCase()\n        // }\n\n        let record = {\n          $: value,\n          idx: i\n        }\n\n        if (ngrams) {\n          record.ng = ngram(value, { sort: true })\n        }\n\n        indexedList.push(record)\n      }\n    }\n\n  } else {\n    // List is Array<Object>\n    const keysLen = keys.length\n\n    for (let i = 0, len = list.length; i < len; i += 1) {\n      let item = list[i]\n\n      let record = { idx: i, $: {} }\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      for (let j = 0; j < keysLen; j += 1) {\n        let key = keys[j]\n        let value = getFn(item, key)\n\n        if (!isDefined(value)) {\n          continue\n        }\n\n        if (isArray(value)) {\n          let subRecords = []\n          const stack = [{ arrayIndex: -1, value }]\n\n          while (stack.length) {\n            const { arrayIndex, value } = stack.pop()\n\n            if (!isDefined(value)) {\n              continue\n            }\n\n            if (isString(value)) {\n\n              // if (!isCaseSensitive) {\n              //   v = v.toLowerCase()\n              // }\n\n              let subRecord = { $: value, idx: arrayIndex }\n\n              if (ngrams) {\n                subRecord.ng = ngram(value, { sort: true })\n              }\n\n              subRecords.push(subRecord)\n\n            } else if (isArray(value)) {\n              for (let k = 0, arrLen = value.length; k < arrLen; k += 1) {\n                stack.push({\n                  arrayIndex: k,\n                  value: value[k],\n                })\n              }\n            }\n          }\n          record.$[key] = subRecords\n        } else {\n          // if (!isCaseSensitive) {\n          //   value = value.toLowerCase()\n          // }\n\n          let subRecord = { $: value }\n\n          if (ngrams) {\n            subRecord.ng = ngram(value, { sort: true })\n          }\n\n          record.$[key] = subRecord\n        }\n      }\n\n      indexedList.push(record)\n    }\n  }\n\n  return indexedList\n}","const { isString } = require('../helpers/type-checkers')\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = {}\n    this._keyNames = []\n    this._length = keys.length\n\n    // Iterate over every key\n    if (keys.length && isString(keys[0])) {\n      for (let i = 0; i < this._length; i += 1) {\n        const key = keys[i]\n        this._keys[key] = {\n          weight: 1\n        }\n        this._keyNames.push(key)\n      }\n    } else {\n      let totalWeight = 0\n\n      for (let i = 0; i < this._length; i += 1) {\n        const key = keys[i]\n\n        if (!key.hasOwnProperty('name')) {\n          throw new Error('Missing \"name\" property in key object')\n        }\n\n        const keyName = key.name\n        this._keyNames.push(keyName)\n\n        if (!key.hasOwnProperty('weight')) {\n          throw new Error('Missing \"weight\" property in key object')\n        }\n\n        const weight = key.weight\n\n        if (weight <= 0 || weight >= 1) {\n          throw new Error('\"weight\" property in key must bein the range of (0, 1)')\n        }\n\n        this._keys[keyName] = {\n          weight\n        }\n\n        totalWeight += weight\n      }\n\n      // Normalize weights so that their sum is equal to 1\n      for (let i = 0; i < this._length; i += 1) {\n        const keyName = this._keyNames[i]\n        const keyWeight = this._keys[keyName].weight\n        this._keys[keyName].weight = keyWeight / totalWeight\n      }\n    }\n  }\n  get(key, name) {\n    return this._keys[key] ? this._keys[key][name] : -1\n  }\n  keys() {\n    return this._keyNames\n  }\n  count() {\n    return this._length\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nmodule.exports = KeyStore","module.exports = {\n  createIndex: require('./create-index'),\n  KeyStore: require('./key-store')\n}","const { isArray, isDefined, isString, isNumber, isObject } = require('../helpers/type-checkers')\n\nmodule.exports = (result, data) => {\n  const matches = result.matches\n  data.matches = []\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  for (let i = 0, len = matches.length; i < len; i += 1) {\n    let match = matches[i]\n\n    if (!isDefined(match.indices) || match.indices.length === 0) {\n      continue\n    }\n\n    let obj = {\n      indices: match.indices,\n      value: match.value\n    }\n\n    if (match.key) {\n      obj.key = match.key\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx\n    }\n\n    data.matches.push(obj)\n  }\n}\n","module.exports = (result, data) => {\n  data.score = result.score\n}","module.exports = {\n  transformMatches: require('./transform-matches'),\n  transformScore: require('./transform-score')\n}","\nconst { BitapSearch, ExtendedSearch, NGramSearch } = require('./search')\nconst { isArray, isDefined, isString, isNumber, isObject } = require('./helpers/type-checkers')\nconst get = require('./helpers/get')\nconst { createIndex, KeyStore } = require('./tools')\nconst { transformMatches, transformScore } = require('./transform')\nconst { MAX_BITS } = require('./search/bitap-search/constants')\n\n// // Will print to the console. Useful for debugging.\n// function debug() {\n//   if (Fuse.verbose) {\n//     console.log(...arguments)\n//     // const util = require('util')\n//     // console.log(util.inspect(...arguments, false, null, true /* enable colors */))\n//   }\n// }\n\n// function debugTime(value) {\n//   if (Fuse.verboseTime) {\n//     console.time(value)\n//   }\n// }\n\n// function debugTimeEnd(value) {\n//   if (Fuse.verboseTime) {\n//     console.timeEnd(value)\n//   }\n// }\n\nlet FuseOptions = {\n  // When true, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100,\n  // Minimum number of characters that must be matched before a result is considered a match\n  findAllMatches: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  includeMatches: false,\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1,\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function\n  sortFn: (a, b) => (a.score - b.score),\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Enabled extended-searching\n  useExtendedSearch: false\n}\n\nclass Fuse {\n  constructor(list, options = FuseOptions, index = null) {\n    this.options = { ...FuseOptions, ...options }\n    // `caseSensitive` is deprecated, use `isCaseSensitive` instead\n    this.options.isCaseSensitive = options.caseSensitive\n    delete this.options.caseSensitive\n\n    // debugTime('Constructing')\n    this._processKeys(this.options.keys)\n    this.setCollection(list, index)\n    // debugTimeEnd('Constructing')\n  }\n\n  setCollection(list, index = null) {\n    this.list = list\n    this.listIsStringArray = isString(list[0])\n\n    if (index) {\n      this.setIndex(index)\n    } else {\n      // debugTime('Process index')\n      this.setIndex(this._createIndex())\n      // debugTimeEnd('Process index')\n    }\n  }\n\n  setIndex(listIndex) {\n    this._indexedList = listIndex\n    // debug(listIndex)\n  }\n\n  _processKeys(keys) {\n    this._keyStore = new KeyStore(keys)\n\n    // debug('Process Keys')\n    if (Fuse.verbose) {\n      // debug(this._keyStore.toJSON())\n    }\n  }\n\n  _createIndex() {\n    return createIndex(this._keyStore.keys(), this.list, {\n      getFn: this.options.getFn\n    })\n  }\n\n  search(pattern, opts = { limit: false }) {\n    // debug(`--------- Search pattern: \"${pattern}\"`)\n    const { useExtendedSearch, shouldSort } = this.options\n\n    let searcher = null\n\n    if (useExtendedSearch) {\n      searcher = new ExtendedSearch(pattern, this.options)\n    } else if (pattern.length > MAX_BITS) {\n      searcher = new NGramSearch(pattern, this.options)\n    } else {\n      searcher = new BitapSearch(pattern, this.options)\n    }\n\n    // debugTime('Search time');\n    let results = this._searchUsing(searcher)\n    // debugTimeEnd('Search time');\n\n    // debugTime('Compute score time');\n    this._computeScore(results)\n    // debugTimeEnd('Compute score time');\n\n    if (shouldSort) {\n      this._sort(results)\n    }\n\n    if (opts.limit && isNumber(opts.limit)) {\n      results = results.slice(0, opts.limit)\n    }\n\n    return this._format(results)\n  }\n\n  _searchUsing(searcher) {\n    const list = this._indexedList\n    const results = []\n    const { includeMatches } = this.options\n\n    // List is Array<String>\n    if (this.listIsStringArray) {\n      // Iterate over every string in the list\n      for (let i = 0, len = list.length; i < len; i += 1) {\n        let value = list[i]\n        let { $: text, idx } = value\n\n        if (!isDefined(text)) {\n          continue\n        }\n\n        let searchResult = searcher.searchIn(value)\n\n        const { isMatch, score } = searchResult\n\n        if (!isMatch) {\n          continue\n        }\n\n        let match = { score, value: text }\n\n        if (includeMatches) {\n          match.indices = searchResult.matchedIndices\n        }\n\n        results.push({\n          item: text,\n          idx,\n          matches: [match]\n        })\n      }\n\n    } else {\n      // List is Array<Object>\n      const keyNames = this._keyStore.keys()\n      const keysLen = this._keyStore.count()\n\n      for (let i = 0, len = list.length; i < len; i += 1) {\n        let { $: item, idx } = list[i]\n\n        if (!isDefined(item)) {\n          continue\n        }\n\n        let matches = []\n\n        // Iterate over every key (i.e, path), and fetch the value at that key\n        for (let j = 0; j < keysLen; j += 1) {\n          let key = keyNames[j]\n          let value = item[key]\n\n          // debug(` Key: ${key === '' ? '--' : key}`)\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isArray(value)) {\n            for (let k = 0, len = value.length; k < len; k += 1) {\n              let arrItem = value[k]\n              let text = arrItem.$\n              let idx = arrItem.idx\n\n              if (!isDefined(text)) {\n                continue\n              }\n\n              let searchResult = searcher.searchIn(arrItem)\n\n              const { isMatch, score } = searchResult\n\n              // debug(`Full text: \"${text}\", score: ${score}`)\n\n              if (!isMatch) {\n                continue\n              }\n\n              let match = { score, key, value: text, idx }\n\n              if (includeMatches) {\n                match.indices = searchResult.matchedIndices\n              }\n\n              matches.push(match)\n            }\n          } else {\n            let text = value.$\n            let searchResult = searcher.searchIn(value)\n\n            const { isMatch, score } = searchResult\n\n            // debug(`Full text: \"${text}\", score: ${score}`)\n\n            if (!isMatch) {\n              continue\n            }\n\n            let match = { score, key, value: text }\n\n            if (includeMatches) {\n              match.indices = searchResult.matchedIndices\n            }\n\n            matches.push(match)\n          }\n        }\n\n        if (matches.length) {\n          results.push({\n            idx,\n            item,\n            matches\n          })\n        }\n      }\n    }\n\n    // debug(\"--------- RESULTS -----------\")\n    // debug(results)\n    // debug(\"-----------------------------\")\n\n    return results\n  }\n\n  _computeScore(results) {\n    // debug('Computing score: ')\n\n    for (let i = 0, len = results.length; i < len; i += 1) {\n      const result = results[i]\n      const matches = result.matches\n      const scoreLen = matches.length\n\n      let totalWeightedScore = 1\n      // let bestScore = -1\n\n      for (let j = 0; j < scoreLen; j += 1) {\n        const item = matches[j]\n        const key = item.key\n        const keyWeight = this._keyStore.get(key, 'weight')\n        const weight = keyWeight > -1 ? keyWeight : 1\n        const score = item.score === 0 && keyWeight > -1\n          ? Number.EPSILON\n          : item.score\n\n        totalWeightedScore *= Math.pow(score, weight)\n\n        // Keep track of the best score.. just in case\n        // Actually, we're not really using it.. but need to think of a way to incorporate this\n        // bestScore = bestScore == -1 ? item.score : Math.min(bestScore, item.score)\n      }\n\n      result.score = totalWeightedScore\n      // result.$score = bestScore\n\n      // debug(result)\n    }\n  }\n\n  _sort(results) {\n    // debug('Sorting....')\n    results.sort(this.options.sortFn)\n  }\n\n  _format(results) {\n    const finalOutput = []\n\n    const { includeMatches, includeScore, } = this.options\n\n    // if (Fuse.verbose) {\n    //   let cache = []\n    //   debug('Output:', JSON.stringify(results, (key, value) => {\n    //     if (isObject(value) && isDefined(value)) {\n    //       if (cache.indexOf(value) !== -1) {\n    //         // Circular reference found, discard key\n    //         return\n    //       }\n    //       // Store value in our collection\n    //       cache.push(value)\n    //     }\n    //     return value\n    //   }, 2))\n    //   cache = null\n    // }\n\n    let transformers = []\n\n    if (includeMatches) transformers.push(transformMatches)\n    if (includeScore) transformers.push(transformScore)\n\n    // debug(\"===== RESULTS ======\")\n    // debug(results)\n    // debug(\"====================\")\n\n    for (let i = 0, len = results.length; i < len; i += 1) {\n      const result = results[i]\n\n      // debug('result', result)\n\n      const { idx } = result\n\n      const data = {\n        item: this.list[idx],\n        refIndex: idx\n      }\n\n      if (transformers.length) {\n        for (let j = 0, len = transformers.length; j < len; j += 1) {\n          transformers[j](result, data)\n        }\n      }\n\n\n      finalOutput.push(data)\n    }\n\n    return finalOutput\n  }\n}\n\nFuse.createIndex = createIndex\n\nmodule.exports = Fuse\n"],"names":["pattern","errors","currentLocation","expectedLocation","distance","accuracy","length","proximity","Math","abs","matchmask","minMatchCharLength","matchedIndices","start","end","i","len","match","push","text","patternAlphabet","location","threshold","findAllMatches","includeMatches","patternLen","textLen","max","min","currentThreshold","bestLocation","indexOf","matchMask","score","bitapScore","lastIndexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","finish","bitArr","Array","j","charMatch","charAt","result","isMatch","MAX_BITS","require$$0","BitapSearch","isCaseSensitive","options","Error","toLowerCase","value","$","searchInString","bitapSearch","isForPattern","sanitize","substr","sanitizedPattern","index","startsWith","endsWith","substring","INFINITY","isArray","Object","prototype","toString","call","baseToString","isString","isNumber","isObject","isDefined","undefined","queryfy","split","map","item","trim","ExtendedSearch","query","_fuzzyCache","matchFound","qLen","parts","pLen","token","_search","exactMatch","prefixExactMatch","inversePrefixExactMatch","inverseSuffixExactMatch","suffixExactMatch","inverseExactMatch","searcher","NGRAM_LEN","n","pad","sort","nGrams","a","b","arr1","arr2","item1","item2","union","intersection","require$$1","nGram1","nGram2","nGramUnion","nGramIntersection","jaccardDistance","NGramSearch","patternNgram","ngram","textNgram","ng","jacardResult","require$$2","obj","path","list","arr","_get","dotIndex","key","remaining","slice","keys","getFn","get","ngrams","indexedList","record","idx","keysLen","subRecords","stack","arrayIndex","pop","subRecord","k","arrLen","KeyStore","_keys","_keyNames","_length","weight","totalWeight","hasOwnProperty","keyName","name","keyWeight","JSON","stringify","createIndex","data","matches","indices","refIndex","transformMatches","transformScore","require$$3","require$$4","FuseOptions","includeScore","shouldSort","sortFn","useExtendedSearch","Fuse","caseSensitive","_processKeys","setCollection","listIsStringArray","setIndex","_createIndex","listIndex","_indexedList","_keyStore","opts","limit","results","_searchUsing","_computeScore","_sort","_format","searchResult","searchIn","keyNames","count","arrItem","scoreLen","totalWeightedScore","Number","EPSILON","pow","finalOutput","transformers"],"mappings":"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"}